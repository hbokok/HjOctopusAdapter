// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sigmob_config_response.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(WindGPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define WindGPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if WindGPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <WindFoundation/WindGPBProtocolBuffers.h>
#else
 #import "WindGPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30004
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30004 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class WindSDKAntiFraudLogConfig;
@class WindSDKCommon;
@class WindSDKCommonEndpointsConfig;
@class WindSDKDialogSetting;
@class WindSDKIOS;
@class WindSDKMotionConfig;
@class WindSDKNativeConfig;
@class WindSDKRvConfig;
@class WindSDKSdkConfig;
@class WindSDKSplashConfig;

NS_ASSUME_NONNULL_BEGIN

#pragma mark - WindSDKSigmobConfigResponseRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (WindGPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c WindGPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
WindGPB_FINAL @interface WindSDKSigmobConfigResponseRoot : WindGPBRootObject
@end

#pragma mark - WindSDKConfigResponse

typedef WindGPB_ENUM(WindSDKConfigResponse_FieldNumber) {
  WindSDKConfigResponse_FieldNumber_Code = 1,
  WindSDKConfigResponse_FieldNumber_ErrorMessage = 2,
  WindSDKConfigResponse_FieldNumber_Config = 3,
};

WindGPB_FINAL @interface WindSDKConfigResponse : WindGPBMessage

@property(nonatomic, readwrite) uint32_t code;

@property(nonatomic, readwrite, copy, null_resettable) NSString *errorMessage;

@property(nonatomic, readwrite, strong, null_resettable) WindSDKSdkConfig *config;
/** Test to see if @c config has been set. */
@property(nonatomic, readwrite) BOOL hasConfig;

@end

#pragma mark - WindSDKSdkConfig

typedef WindGPB_ENUM(WindSDKSdkConfig_FieldNumber) {
  WindSDKSdkConfig_FieldNumber_CommonConfig = 1,
  WindSDKSdkConfig_FieldNumber_IosConfig = 2,
  WindSDKSdkConfig_FieldNumber_Options = 4,
};

/**
 * 配置信息
 **/
WindGPB_FINAL @interface WindSDKSdkConfig : WindGPBMessage

@property(nonatomic, readwrite, strong, null_resettable) WindSDKCommon *commonConfig;
/** Test to see if @c commonConfig has been set. */
@property(nonatomic, readwrite) BOOL hasCommonConfig;

@property(nonatomic, readwrite, strong, null_resettable) WindSDKIOS *iosConfig;
/** Test to see if @c iosConfig has been set. */
@property(nonatomic, readwrite) BOOL hasIosConfig;

/** 扩展字段 */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableDictionary<NSString*, NSString*> *options;
/** The number of items in @c options without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger options_Count;

@end

#pragma mark - WindSDKCommon

typedef WindGPB_ENUM(WindSDKCommon_FieldNumber) {
  WindSDKCommon_FieldNumber_Endpoints = 1,
  WindSDKCommon_FieldNumber_RvConfig = 2,
  WindSDKCommon_FieldNumber_SplashConfig = 3,
  WindSDKCommon_FieldNumber_NativeConfig = 4,
  WindSDKCommon_FieldNumber_ConfigRefresh = 6,
  WindSDKCommon_FieldNumber_AntiFraudLog = 7,
  WindSDKCommon_FieldNumber_IsGdprRegion = 8,
  WindSDKCommon_FieldNumber_TrackingExpirationTime = 9,
  WindSDKCommon_FieldNumber_TrackingRetryInterval = 10,
  WindSDKCommon_FieldNumber_MaxSendLogRecords = 11,
  WindSDKCommon_FieldNumber_SendLogInterval = 12,
  WindSDKCommon_FieldNumber_DclogBlacklistArray = 13,
  WindSDKCommon_FieldNumber_EnableDebugLevel = 14,
  WindSDKCommon_FieldNumber_LoadInterval = 15,
  WindSDKCommon_FieldNumber_DisableUpLocation = 16,
  WindSDKCommon_FieldNumber_LogEnc = 17,
  WindSDKCommon_FieldNumber_FeedbackDebug = 18,
};

WindGPB_FINAL @interface WindSDKCommon : WindGPBMessage

/** api配置 */
@property(nonatomic, readwrite, strong, null_resettable) WindSDKCommonEndpointsConfig *endpoints;
/** Test to see if @c endpoints has been set. */
@property(nonatomic, readwrite) BOOL hasEndpoints;

/** 激励视频配置 */
@property(nonatomic, readwrite, strong, null_resettable) WindSDKRvConfig *rvConfig;
/** Test to see if @c rvConfig has been set. */
@property(nonatomic, readwrite) BOOL hasRvConfig;

/** 开屏配置 */
@property(nonatomic, readwrite, strong, null_resettable) WindSDKSplashConfig *splashConfig;
/** Test to see if @c splashConfig has been set. */
@property(nonatomic, readwrite) BOOL hasSplashConfig;

/** 信息流配置 */
@property(nonatomic, readwrite, strong, null_resettable) WindSDKNativeConfig *nativeConfig;
/** Test to see if @c nativeConfig has been set. */
@property(nonatomic, readwrite) BOOL hasNativeConfig;

/** config刷新间隔 */
@property(nonatomic, readwrite) uint32_t configRefresh;

/** 反作弊信息采集配置 */
@property(nonatomic, readwrite, strong, null_resettable) WindSDKAntiFraudLogConfig *antiFraudLog;
/** Test to see if @c antiFraudLog has been set. */
@property(nonatomic, readwrite) BOOL hasAntiFraudLog;

/** 是否gdpr地区，默认是false */
@property(nonatomic, readwrite) BOOL isGdprRegion;

/** track事件过期时间，过期后不执行补发操作，单位秒 */
@property(nonatomic, readwrite) uint32_t trackingExpirationTime;

/** track上报失败的重发时间间隔 */
@property(nonatomic, readwrite) uint32_t trackingRetryInterval;

/** 每次上传打点日志的最大条数 */
@property(nonatomic, readwrite) uint32_t maxSendLogRecords;

/** 打点日志上报时间间隔（单位：秒） */
@property(nonatomic, readwrite) uint32_t sendLogInterval;

/** 点号位黑明单，默认会将100，101号点自动加入黑名单，如果下发了黑明单，以下发为准。 */
@property(nonatomic, readwrite, strong, null_resettable) WindGPBUInt32Array *dclogBlacklistArray;
/** The number of items in @c dclogBlacklistArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger dclogBlacklistArray_Count;

/** 是否开启debug日志、初始化监测广告插件、监测结果打点和日志输出 */
@property(nonatomic, readwrite) BOOL enableDebugLevel;

/** 重复发起请求的间隔时间，在非ready的情况下，用来防止重复发起请求 */
@property(nonatomic, readwrite) uint32_t loadInterval;

/** 是否禁止上传用户的位置信息。false: 不禁止上传；true: 禁止上传 */
@property(nonatomic, readwrite) BOOL disableUpLocation;

/** false: 不加密；true: 加密 */
@property(nonatomic, readwrite) BOOL logEnc;

/** false: 不开启；true: 开启 */
@property(nonatomic, readwrite) BOOL feedbackDebug;

@end

#pragma mark - WindSDKIOS

typedef WindGPB_ENUM(WindSDKIOS_FieldNumber) {
  WindSDKIOS_FieldNumber_OpenSchemeListArray = 1,
  WindSDKIOS_FieldNumber_QueriedURLSchemes = 2,
};

WindGPB_FINAL @interface WindSDKIOS : WindGPBMessage

/** 代验证的canOpen列表 */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *openSchemeListArray;
/** The number of items in @c openSchemeListArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger openSchemeListArray_Count;

/** 是否开启读取info.plist的白名单配置 */
@property(nonatomic, readwrite) BOOL queriedURLSchemes;

@end

#pragma mark - WindSDKAntiFraudLogConfig

typedef WindGPB_ENUM(WindSDKAntiFraudLogConfig_FieldNumber) {
  WindSDKAntiFraudLogConfig_FieldNumber_MotionConfig = 1,
  WindSDKAntiFraudLogConfig_FieldNumber_EventsArray = 2,
};

/**
 * 传感器配置信息
 **/
WindGPB_FINAL @interface WindSDKAntiFraudLogConfig : WindGPBMessage

/** 传感器配置，如果不配置，则认为不采集传感器信息 */
@property(nonatomic, readwrite, strong, null_resettable) WindSDKMotionConfig *motionConfig;
/** Test to see if @c motionConfig has been set. */
@property(nonatomic, readwrite) BOOL hasMotionConfig;

/** 触发事件列表['load', 'start', 'click', 'close'] */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *eventsArray;
/** The number of items in @c eventsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger eventsArray_Count;

@end

#pragma mark - WindSDKMotionConfig

typedef WindGPB_ENUM(WindSDKMotionConfig_FieldNumber) {
  WindSDKMotionConfig_FieldNumber_Interval = 1,
  WindSDKMotionConfig_FieldNumber_QueueMax = 2,
  WindSDKMotionConfig_FieldNumber_Count = 3,
};

WindGPB_FINAL @interface WindSDKMotionConfig : WindGPBMessage

/** 单位毫秒；传感器获取的间隔时间 */
@property(nonatomic, readwrite) uint32_t interval;

/** 对列的最大值 */
@property(nonatomic, readwrite) uint32_t queueMax;

/** 从队列中分别获取事件前后的条数 */
@property(nonatomic, readwrite) uint32_t count;

@end

#pragma mark - WindSDKCommonEndpointsConfig

typedef WindGPB_ENUM(WindSDKCommonEndpointsConfig_FieldNumber) {
  WindSDKCommonEndpointsConfig_FieldNumber_Log = 1,
  WindSDKCommonEndpointsConfig_FieldNumber_Ads = 2,
  WindSDKCommonEndpointsConfig_FieldNumber_HbAds = 3,
  WindSDKCommonEndpointsConfig_FieldNumber_DebugFeedback = 4,
};

/**
 * 通用地址配置
 **/
WindGPB_FINAL @interface WindSDKCommonEndpointsConfig : WindGPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *log;

@property(nonatomic, readwrite, copy, null_resettable) NSString *ads;

@property(nonatomic, readwrite, copy, null_resettable) NSString *hbAds;

@property(nonatomic, readwrite, copy, null_resettable) NSString *debugFeedback;

@end

#pragma mark - WindSDKRvConfig

typedef WindGPB_ENUM(WindSDKRvConfig_FieldNumber) {
  WindSDKRvConfig_FieldNumber_CacheTop = 1,
  WindSDKRvConfig_FieldNumber_AdLoadTimeout = 2,
  WindSDKRvConfig_FieldNumber_CloseDialogSetting = 3,
};

/**
 * 激励视频配置
 **/
WindGPB_FINAL @interface WindSDKRvConfig : WindGPBMessage

/** 本地缓存上限 */
@property(nonatomic, readwrite) uint32_t cacheTop;

/** 广告总超时 */
@property(nonatomic, readwrite) uint32_t adLoadTimeout;

/** 激励视频关闭对话框配置 */
@property(nonatomic, readwrite, strong, null_resettable) WindSDKDialogSetting *closeDialogSetting;
/** Test to see if @c closeDialogSetting has been set. */
@property(nonatomic, readwrite) BOOL hasCloseDialogSetting;

@end

#pragma mark - WindSDKSplashConfig

typedef WindGPB_ENUM(WindSDKSplashConfig_FieldNumber) {
  WindSDKSplashConfig_FieldNumber_CacheTop = 1,
  WindSDKSplashConfig_FieldNumber_MaterialExpiredTime = 2,
};

/**
 * 开屏配置
 **/
WindGPB_FINAL @interface WindSDKSplashConfig : WindGPBMessage

/** 开屏素材缓存上限，小于0，则清楚缓存 */
@property(nonatomic, readwrite) int32_t cacheTop;

/** 素材的过期时间，单位天数，若小于0，则清楚缓存 */
@property(nonatomic, readwrite) int32_t materialExpiredTime;

@end

#pragma mark - WindSDKNativeConfig

typedef WindGPB_ENUM(WindSDKNativeConfig_FieldNumber) {
  WindSDKNativeConfig_FieldNumber_CacheTop = 1,
  WindSDKNativeConfig_FieldNumber_AdLoadTimeout = 2,
};

/**
 * 激励视频相关接口地址
 **/
WindGPB_FINAL @interface WindSDKNativeConfig : WindGPBMessage

/** 原生广告素材缓存上限，小于等于0，则清除缓存 */
@property(nonatomic, readwrite) int32_t cacheTop;

/** 广告总超时 */
@property(nonatomic, readwrite) uint32_t adLoadTimeout;

@end

#pragma mark - WindSDKDialogSetting

typedef WindGPB_ENUM(WindSDKDialogSetting_FieldNumber) {
  WindSDKDialogSetting_FieldNumber_Title = 1,
  WindSDKDialogSetting_FieldNumber_BodyText = 2,
  WindSDKDialogSetting_FieldNumber_CancelButtonText = 3,
  WindSDKDialogSetting_FieldNumber_CloseButtonText = 4,
};

WindGPB_FINAL @interface WindSDKDialogSetting : WindGPBMessage

/** 标题 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *title;

/** 正文，针对激励视频，需要在文案中带宏,表示视频剩余播放的秒数 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *bodyText;

/** 取消按钮的文案 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *cancelButtonText;

/** 关闭按钮的文案 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *closeButtonText;

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
